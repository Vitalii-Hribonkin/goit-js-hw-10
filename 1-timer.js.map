{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\n\nlet userSelectedDate = null;\nconst startButton = document.querySelector('button[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\nlet countdownInterval = null;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({ title: 'Error', message: 'Please choose a date in the future' });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const timeLeft = userSelectedDate - new Date();\n    if (timeLeft <= 0) {\n      clearInterval(countdownInterval);\n      updateTimerDisplay(0);\n      dateTimePicker.disabled = false;\n      startButton.disabled = true;\n    } else {\n      updateTimerDisplay(timeLeft);\n    }\n  }, 1000);\n});\n\nfunction updateTimerDisplay(ms) {\n  const { days, hours, minutes, seconds } = convertMs(ms);\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["userSelectedDate","startButton","dateTimePicker","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdownInterval","options","selectedDates","selectedDate","timeLeft","updateTimerDisplay","ms","days","hours","minutes","seconds","convertMs","addLeadingZero","value"],"mappings":"oDAEA,IAAIA,EAAmB,KACvB,MAAMC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAC3D,IAAIC,EAAoB,KAExBN,EAAY,SAAW,GAEvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtB,SAAS,MAAM,CAAE,MAAO,QAAS,QAAS,oCAAoC,CAAE,EAChFT,EAAY,SAAW,KAEvBD,EAAmBU,EACnBT,EAAY,SAAW,GAE1B,CACH,EAEA,UAAUC,EAAgBM,CAAO,EAEjCP,EAAY,iBAAiB,QAAS,IAAM,CACrCD,IAELC,EAAY,SAAW,GACvBC,EAAe,SAAW,GAE1BK,EAAoB,YAAY,IAAM,CACpC,MAAMI,EAAWX,EAAmB,IAAI,KACpCW,GAAY,GACd,cAAcJ,CAAiB,EAC/BK,EAAmB,CAAC,EACpBV,EAAe,SAAW,GAC1BD,EAAY,SAAW,IAEvBW,EAAmBD,CAAQ,CAE9B,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAmBC,EAAI,CAC9B,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAE,EACtDV,EAAS,YAAcgB,EAAeL,CAAI,EAC1CV,EAAU,YAAce,EAAeJ,CAAK,EAC5CV,EAAY,YAAcc,EAAeH,CAAO,EAChDV,EAAY,YAAca,EAAeF,CAAO,CAClD,CAEA,SAASC,EAAUL,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}